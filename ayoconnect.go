package ayoconnect

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"github.com/vannleonheart/goutil"
	"strings"
	"time"
)

func New(config *Config) *Client {
	return &Client{Config: config}
}

func (c *Client) WithAccessToken(token string) *Client {
	c.accessToken = strings.TrimSpace(token)

	return c
}

func (c *Client) WithRequestId(requestId string) *Client {
	c.requestId = requestId

	return c
}

func (c *Client) WithAutoGeneratedRequestId() *Client {
	randomString := goutil.NewRandomString("")

	str := fmt.Sprintf("%s.%d", randomString.Generate(8), time.Now().UnixMicro())

	h := md5.New()

	h.Write([]byte(str))

	c.requestId = hex.EncodeToString(h.Sum(nil))

	return c
}

func (c *Client) WithIpAddress(ipAddress string) *Client {
	c.ipAddress = ipAddress

	return c
}

func (c *Client) WithPhoneNumber(phoneNumber string) *Client {
	c.phoneNumber = phoneNumber

	return c
}

func (c *Client) Authenticate() (*AuthenticationResponse, error) {
	targetUrl := fmt.Sprintf("%s/v1/oauth/client_credential/accesstoken?grant_type=client_credentials", c.Config.BaseUrl)

	requestHeaders := map[string]string{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	requestData := map[string]interface{}{
		"client_id":     c.Config.ClientId,
		"client_secret": c.Config.ClientSecret,
	}

	var result AuthenticationResponse

	if _, err := goutil.SendHttpPost(targetUrl, &requestData, &requestHeaders, &result); err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) prepareAccessToken() error {
	if len(c.accessToken) > 0 {
		return nil
	}

	resp, err := c.Authenticate()
	if err != nil {
		return err
	}

	c.WithAccessToken(resp.AccessToken)

	return nil
}
